theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2, y = 6, xend = 4, yend = 6, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.5, y = 6, xend = 4, yend = 6, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
set.seed(123)
x <- rnorm(100, mean = 2, sd = 4)
y <- 0.5*x + rnorm(100, mean = 5, sd = 1)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
library(ggplot2)
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 6, yend = 6.5, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.5, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 7, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.2, y=4, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.2, y=6, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.2, y=5.8, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.4, y=5.8, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
set.seed(123)
x <- rnorm(100, mean = 2, sd = 4)
y <- 0.5*x + rnorm(100, mean = 5, sd = 1)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
library(ggplot2)
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.4, y=5.8, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
set.seed(NULL)
set.seed(123)
x <- rnorm(100, mean = 2, sd = 4)
y <- 0.5*x + rnorm(100, mean = 5, sd = 1)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
library(ggplot2)
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.4, y=5.8, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
set.seed(NULL)
library(dplyr)
#library(UsingR)
library(ggplot2)
load("datos/pisa18_puntajes.RData")
set.seed(123)
x <- runif(200, 0, 10)
y1 <- 2*x + rnorm(200, 5, 2)
y2 <- -2*x + rnorm(200, 25, 2)
y3 <- x^2 + rnorm(200, 5, 2)
y4 <- rnorm(200, 5, 2)
# Crear un marco de 2x2 para las gráficas
par(mfrow = c(2, 2))
# Gráfica 1: Relación lineal positiva
plot(x, y1, main = "Relación Lineal Positiva", xlab = "x", ylab = "y")
# Gráfica 2: Relación lineal negativa
plot(x, y2, main = "Relación Lineal Negativa", xlab = "x", ylab = "y")
# Gráfica 3: Relación no lineal
plot(x, y3, main = "Relación No Lineal", xlab = "x", ylab = "y")
# Gráfica 4: Sin relación evidente
plot(x, y4, main = "Sin Relación Evidente", xlab = "x", ylab = "y")
set.seed(NULL)
set.seed(123)
x <- rnorm(100, mean = 2, sd = 4)
y <- 0.5*x + rnorm(100, mean = 5, sd = 1)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
library(ggplot2)
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.4, y=5.8, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
set.seed(NULL)
x <- pisa18$PVMATH
y <- pisa18$PVREAD
plot(x = pisa18$PVMATH, y = pisa18$PVREAD, col = "#4ABF9C")
abline(lm(y ~ x), col = "#316BAC", lwd = 2)
datos <- select(pisa18, PVMATH, PVREAD)
muestra <- datos[sample(nrow(datos), 100, replace = FALSE),]
y <- muestra$PVREAD
x <- muestra$PVMATH
# Estimar el modelos de regresión
modelo <- lm(y ~ x)
# Obtener los residuos del modelo
residuos <- residuals(modelo)
# Integrar los datos por posición
datos <- data.frame(x, y, residuos)
# Crear la gráfica con ggplot2
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "#063365") +
geom_smooth(method = lm, se = FALSE, color = "#316BAC") +
geom_hline(yintercept = mean(y), color = "#4ABF9C", size = 1) +
geom_vline(xintercept = mean(x), color = "#4ABF9C", size = 1) +
geom_linerange(aes(ymin = y, ymax = y - residuos), color = "#FF7E39") +
labs(title = "Ajuste del Modelo de Regresión Lineal",
x = "Variable independiente: puntaje en Matemáticas (X)", y = "Variable dependiente: puntaje en lectura (Y)") +
annotate("text", x = mean(x) + 0.08 * min(x), y = max(y) - 0.1 * min(y), label = "Media de x", vjust = -1) +
annotate("text", x = min(x) + 0.1 * min(x), y = mean(y) + 0.05 * min(y), label = "Media de y", hjust = 1)
######
# Crear datos simulados
set.seed(123)
n <- 100
tiempo <- 1:n
error_indep <- rnorm(n, mean = 0, sd = 1)
error_autocorr <- arima.sim(model = list(ar = 0.7), n = n)
error_periodic <- sin(tiempo/10 * 2 * pi) + rnorm(n, mean = 0, sd = 0.5)
# Crear la primera gráfica: errores independientes vs tiempo
plot(tiempo, error_indep, type = "l", xlab = "Tiempo", ylab = "Errores Independientes", main = "Errores Independientes vs Tiempo")
# Crear la segunda gráfica: errores autocorrelacionados vs tiempo
plot(tiempo, error_autocorr, type = "l", xlab = "Tiempo", ylab = "Errores Autocorrelacionados", main = "Errores Autocorrelacionados vs Tiempo")
# Crear la tercera gráfica: errores periódicos vs tiempo
plot(tiempo, error_periodic, type = "l", xlab = "Tiempo", ylab = "Errores Periódicos", main = "Errores Periódicos vs Tiempo")
# Crear la primera gráfica: errores independientes vs tiempo
plot(tiempo, error_indep, xlab = "Tiempo", ylab = "Errores Independientes", main = "Errores Independientes vs Tiempo")
# Crear la segunda gráfica: errores autocorrelacionados vs tiempo
plot(tiempo, error_autocorr, xlab = "Tiempo", ylab = "Errores Autocorrelacionados", main = "Errores Autocorrelacionados vs Tiempo")
# Crear la tercera gráfica: errores periódicos vs tiempo
plot(tiempo, error_periodic, xlab = "Tiempo", ylab = "Errores Periódicos", main = "Errores Periódicos vs Tiempo")
set.seed(123)
n <- 100
tiempo <- 1:n
error_ciclico <- sin(tiempo/10 * 2 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, type = "l", xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
n <- 10
tiempo <- 1:n
error_ciclico <- sin(tiempo/10 * 2 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
set.seed(123)
n <- 10
tiempo <- 1:n
error_ciclico <- sin(tiempo/2 * 2 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
n <- 10
tiempo <- 1:n
error_ciclico <- sin(tiempo/10  * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
error_ciclico <- sin(tiempo/10 * 2 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
error_ciclico <- sin(tiempo/10 * 1 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
set.seed(123)
n <- 10
tiempo <- rep(1:n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
tiempo <- rep(1, n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
tiempo <- rep(1, n, 0.2)
?rp
?rep
tiempo <- rep(1:n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
n <- 10
tiempo <- rep(1:n, 0.2)
tiempo
tiempo <- seq(1:n, 0.2)
n <- 10
tiempo <- seq(1:n, 0.2)
?seq
tiempo <- seq(1, n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
abline(h = 0, lty = "dashed", col = "red")
set.seed(123)
n <- 10
tiempo <- seq(0, n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
abline(h = 0, lty = "dashed", col = "red")
tiempo <- seq(0.2, n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
abline(h = 0, lty = "dashed", col = "red")
set.seed(123)
n <- 100
tiempo <- 1:n
error_indep <- rnorm(n, mean = 0, sd = 1)
plot(tiempo, error_indep, type = "l", xlab = "Tiempo", ylab = "Errores Independientes", main = "Errores Independientes vs Tiempo")
plot(tiempo, error_indep, xlab = "Tiempo", ylab = "Errores Independientes", main = "Errores Independientes vs Tiempo")
set.seed(123)
x <- rnorm(100, mean = 2, sd = 4)
y <- 0.5*x + rnorm(100, mean = 5, sd = 1)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
library(ggplot2)
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", size = 1) +
geom_vline(xintercept = 0, color = "GRAY", size = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.4, y=5.8, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
set.seed(NULL)
set.seed(123)
x <- rnorm(100, mean = 2, sd = 4)
y <- 0.5*x + rnorm(100, mean = 5, sd = 1)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
library(ggplot2)
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(col = "#FFFFFF") +
labs(x = "X", y = "Y") +
geom_hline(yintercept = 0, color = "GRAY", linewidth = 1) +
geom_vline(xintercept = 0, color = "GRAY", linewidth = 1) +
geom_segment(x = 2.3, y = 6, xend = 4, yend = 6, color = 2) +
geom_segment(x = 4, y = 6, xend = 4, yend = 6.9, color = 2) +
geom_smooth(method = "lm", se = FALSE) +
theme(panel.background = element_rect(fill = "transparent"),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()) +
annotate('text', label= expression(alpha),
x=-0.4, y=4.9, hjust=0.5, vjust=0, size=8) +
annotate('text', label= expression(beta),
x=4.4, y=5.8, hjust=0.5, vjust=0, size=8) +
coord_cartesian(xlim = c(-max(abs(x)), max(abs(x))),
ylim = c(0, max(abs(y))))
set.seed(NULL)
set.seed(345)
datos <- select(pisa18, PVMATH, PVREAD)
library(dplyr)
#library(UsingR)
library(ggplot2)
load("datos/pisa18_puntajes.RData")
set.seed(345)
datos <- select(pisa18, PVMATH, PVREAD)
muestra <- datos[sample(nrow(datos), 100, replace = FALSE),]
y <- muestra$PVREAD
x <- muestra$PVMATH
# Estimar el modelos de regresión
modelo <- lm(y ~ x)
# Obtener los residuos del modelo
residuos <- residuals(modelo)
# Integrar los datos por posición
datos <- data.frame(x, y, residuos)
# Crear la gráfica con ggplot2
ggplot(datos, aes(x = x, y = y)) +
geom_point(color = "#063365") +
geom_smooth(method = lm, se = FALSE, color = "#316BAC") +
geom_hline(yintercept = mean(y), color = "#4ABF9C", size = 1) +
geom_vline(xintercept = mean(x), color = "#4ABF9C", size = 1) +
geom_linerange(aes(ymin = y, ymax = y - residuos), color = "#FF7E39") +
labs(title = "Ajuste del Modelo de Regresión Lineal",
x = "Variable independiente: puntaje en Matemáticas (X)", y = "Variable dependiente: puntaje en lectura (Y)") +
annotate("text", x = mean(x) + 0.08 * min(x), y = max(y) - 0.1 * min(y), label = "Media de x", vjust = -1) +
annotate("text", x = min(x) + 0.1 * min(x), y = mean(y) + 0.05 * min(y), label = "Media de y", hjust = 1)
set.seed(NULL)
set.seed(123)
n <- 100
tiempo <- 1:n
error_indep <- rnorm(n, mean = 0, sd = 1)
plot(tiempo, error_indep, xlab = "t", ylab = "Errores Independientes", main = "Errores Independientes vs Tiempo")
n <- 100
tiempo <- seq(0.2, n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
abline(h = 0, lty = "dashed", col = "red")
n <- 10
tiempo <- seq(0.2, n, 0.2)
error_ciclico <- sin(tiempo/10 * 3 * pi)
# Crear la gráfica de errores cíclicos vs tiempo
plot(tiempo, error_ciclico, xlab = "Tiempo", ylab = "Errores Cíclicos", main = "Errores Cíclicos vs Tiempo")
abline(h = 0, lty = "dashed", col = "red")
