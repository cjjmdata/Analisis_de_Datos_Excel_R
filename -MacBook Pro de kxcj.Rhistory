getwd()
library(readr)
PISA15_calificaciones <- read_csv("10_ModeloDeRegresion/data/PISA15_calificaciones.csv")
View(PISA15_calificaciones)
pisa15 <- PISA15_calificaciones
plot(x = pisa15$PV1MATH, y = pisa15$PV1SCIE)
plot(x = pisa15$PV1MATH, y = pisa15$PV1READ)
getwd()
ls
library(haven)
PISA18_CY07_MSU_STU_QQQ_Mx_puntajes <- read_sav("00_apoyo/BD/PISA18_CY07_MSU_STU_QQQ_Mx_puntajes.sav")
View(PISA18_CY07_MSU_STU_QQQ_Mx_puntajes)
View(PISA18_CY07_MSU_STU_QQQ_Mx_puntajes)
library(haven)
PISA18_CY07_MSU_STU_QQQ_Mx_puntajes <- read_sav("00_apoyo/BD/PISA18_CY07_MSU_STU_QQQ_Mx_puntajes.sav")
View(PISA18_CY07_MSU_STU_QQQ_Mx_puntajes)
pisa18 <- PISA18_CY07_MSU_STU_QQQ_Mx_puntajes
plot(x = pisa18$PVMATH, y = pisa18$PVSCIE)
plot(x = pisa18$PVMATH, y = pisa18$PVREAD)
library(dplyr)
pisa18_r <- select(pisa18, CNT, CNTSTUID, PVMATH:PVSCIE)
View(pisa18_r)
pisa18 <- select(pisa18, CNT, CNTSTUID, PVMATH:PVSCIE)
rm(pisa18_r)
save(pisa18, file = 'datos/pisa18_puntajes.RData')
getwd()
save(pisa18, file = 'T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes.RData')
getwd()
quarto publish quarto-pub
list
list()
quarto publish quarto-pub
install.packages("quarto")
library(quarto)
mi_documento <- read_quarto("mi_documento.quarto")
library(quarto)
quarto publish quarto-pub
quarto_login()
quarto_login()
?quarto
??quarto
quarto_login()
getwd()
setwd("C:/Users/kxcj/OneDrive/R/proyectos/cursos/anahuac/Analisis_de_Datos_Excel_R/T10_ModeloDeRegresion/presentaciones")
getwd()
quarto_login()
?load
load("datos/pisa18_puntajes")
getwd()
load("T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes")
load("../T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes")
getwd()
load("../T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes.RData")
load("../T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes.RData")
load("C:/Users/kxcj/OneDrive/R/proyectos/cursos/anahuac/Analisis_de_Datos_Excel_R/T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes.RData")
load("C:/Users/kxcj/OneDrive/R/proyectos/cursos/anahuac/Analisis_de_Datos_Excel_R/T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes.RData")
load("C:/Users/kxcj/OneDrive/R/proyectos/cursos/anahuac/Analisis_de_Datos_Excel_R/T10_ModeloDeRegresion/presentaciones/datos/pisa18_puntajes.RData")
plot(x = pisa18$PVMATH, y = pisa18$PVSCIE)
x <- pisa18$PVMATH
library(dplyr)
library(UsingR)
load("datos/pisa18_puntajes.RData")
#| echo: true
plot(x = pisa18$PVMATH, y = pisa18$PVREAD)
x <- pisa18$PVMATH
y <- pisa18$PVREAD
plot(x = pisa18$PVMATH, y = pisa18$PVREAD)
abline(lm(y ~ x), col = "red", lwd = 2)
x <- rnorm(50, mean = 10, sd = 2)
y <- 3*x + rnorm(50, mean = 0, sd = 1)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
# Graficar la distribución de Y dado x
plot(x, y, main = "Gráfico de dispersión de regresión lineal simple",
xlab = "X", ylab = "Y")
abline(modelo, col = "red")
# Cargar la librería ggplot2
library(ggplot2)
# Crear un conjunto de datos simulados
x <- 1:20
y <- 2*x + rnorm(20, mean = 0, sd = 2)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x)
# Obtener los residuos del modelo
residuos <- residuals(modelo)
# Crear un dataframe con los datos
datos <- data.frame(x, y, residuos)
# Crear la gráfica con ggplot2
ggplot(datos, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = lm, se = TRUE, color = "red") +
geom_hline(yintercept = mean(y), color = "blue") +
geom_linerange(aes(ymin = y, ymax = y - residuos), color = "black") +
labs(title = "Modelo de Regresión Lineal",
x = "Variable predictora (X)", y = "Variable de respuesta (Y)")
# Cargar la librería ggplot2
library(ggplot2)
# Crear un conjunto de datos simulados
set.seed(123)
x <- rnorm(100, 5, 2)
y <- 3*x + rnorm(100, 0, 1)
datos <- data.frame(x, y)
# Ajustar el modelo de regresión lineal simple
modelo <- lm(y ~ x, data = datos)
# Crear una secuencia de valores de x para predecir los valores de y
nueva_x <- seq(min(x), max(x), length.out = 100)
predicciones <- predict(modelo, newdata = data.frame(x = nueva_x))
# Crear la gráfica con ggplot2
ggplot(datos, aes(x = x, y = y)) +
geom_point() +
geom_line(aes(x = nueva_x, y = predicciones), color = "red") +
labs(title = "Distribución Condicional de la Respuesta",
x = "Variable predictora (X)", y = "Variable de respuesta (Y)")
library(ggplot2)
# Generate some example data
set.seed(123)
x <- rnorm(100)
y <- 2*x + rnorm(100)
df <- data.frame(x, y)
# Fit a linear regression model
model <- lm(y ~ x, data = df)
# Create a scatter plot with regression line
p <- ggplot(df, aes(x, y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Extract the intercept and slope of the regression line
intercept <- coef(model)[1]
slope <- coef(model)[2]
# Create a data frame of x and y values for the normal distributions
x_range <- range(df$x)
y_range <- range(df$y)
x_vals <- seq(x_range[1], x_range[2], length.out = 5)
y_vals <- seq(y_range[1], y_range[2], length.out = 5)
xy_vals <- expand.grid(x_vals, y_vals)
names(xy_vals) <- c("x", "y")
xy_vals$y_pred <- predict(model, newdata = xy_vals)
# Add normal distributions to the plot
for (i in 1:5) {
sigma <- sqrt(sum((df$y - (intercept + slope*df$x))^2)/(nrow(df)-2))
df_n <- data.frame(x = x_vals[i], y = y_vals,
y_prob = dnorm(y_vals, mean = xy_vals$y_pred[i], sd = sigma))
p <- p + geom_line(data = df_n, aes(x, y_prob), color = "blue")
}
# Add a title and labels
p <- p + labs(title = "Conditional Distribution of Response Variable",
x = "Explanatory Variable", y = "Response Variable")
# Display the plot
p
icecream <- data.frame(
temp=c(11.9, 14.2, 15.2, 16.4, 17.2, 18.1,
18.5, 19.4, 22.1, 22.6, 23.4, 25.1),
units=c(185L, 215L, 332L, 325L, 408L, 421L,
406L, 412L, 522L, 445L, 544L, 614L)
)
glmModelPlot <- function(x, y, xlim,ylim, meanPred,  LwPred, UpPred,
plotData, main=NULL){
## Based on code by Arthur Charpentier:
## http://freakonometrics.hypotheses.org/9593
par(mfrow=c(1,1))
n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("yellow", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="light blue", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("blue", alpha.f = 0.5))
}
}
icecream <- data.frame(
temp=c(11.9, 14.2, 15.2, 16.4, 17.2, 18.1,
18.5, 19.4, 22.1, 22.6, 23.4, 25.1),
units=c(185L, 215L, 332L, 325L, 408L, 421L,
406L, 412L, 522L, 445L, 544L, 614L)
)
glmModelPlot <- function(x, y, xlim,ylim, meanPred,  LwPred, UpPred,
plotData, main=NULL){
## Based on code by Arthur Charpentier:
## http://freakonometrics.hypotheses.org/9593
par(mfrow=c(1,1))
n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("yellow", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="light blue", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("blue", alpha.f = 0.5))
}
}
xlim <- c(min(icecream$temp)*0.95, max(icecream$temp)*1.05)
ylim <- c(floor(min(icecream$units)*0.95),
ceiling(max(icecream$units)*1.05))
lin.mod <- glm(units ~ temp, data=icecream,
family=gaussian(link="identity"))
par(mfrow=c(2,2))
plot(lin.mod)
title(outer=TRUE, line = -1,
main = list("Linear regression",
cex=1.25,col="black", font=2))
meanPred <- predict(lin.mod, type="response")
sdgig <- sqrt(summary(lin.mod)$dispersion)
UpPred <- qnorm(.95, meanPred, sdgig)
LwPred <- qnorm(.05, meanPred, sdgig)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
stp <- 251
x = rep(icecream$temp[i], stp)
y = seq(ylim[1], ylim[2], length=stp)
z0 = rep(0, stp)
z = dnorm(y, meanPred[i], sdgig)
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Linear regression")
attach(cars)
n=2
X= cars$speed
Y=cars$dist
df=data.frame(X,Y)
vX=seq(min(X)-2,max(X)+2,length=n)
vY=seq(min(Y)-15,max(Y)+15,length=n)
mat=persp(vX,vY,matrix(0,n,n),zlim=c(0,.1),theta=-30,ticktype ="detailed", box = FALSE)
reggig=glm(Y~X,data=df,family=gaussian(link="identity"))
x=seq(min(X),max(X),length=501)
C=trans3d(x,predict(reggig,newdata=data.frame(X=x),type="response"),rep(0,length(x)),mat)
lines(C,lwd=2)
sdgig=sqrt(summary(reggig)$dispersion)
x=seq(min(X),max(X),length=501)
y1=qnorm(.95,predict(reggig,newdata=data.frame(X=x),type="response"), sdgig)
C=trans3d(x,y1,rep(0,length(x)),mat)
lines(C,lty=2)
y2=qnorm(.05,predict(reggig,newdata=data.frame(X=x),type="response"), sdgig)
C=trans3d(x,y2,rep(0,length(x)),mat)
lines(C,lty=2)
C=trans3d(c(x,rev(x)),c(y1,rev(y2)),rep(0,2*length(x)),mat)
polygon(C,border=NA,col="yellow")
C=trans3d(X,Y,rep(0,length(X)),mat)
points(C,pch=19,col="red")
n=8
vX=seq(min(X),max(X),length=n)
mgig=predict(reggig,newdata=data.frame(X=vX))
sdgig=sqrt(summary(reggig)$dispersion)
for(j in n:1){
stp=251
x=rep(vX[j],stp)
y=seq(min(min(Y)-15,qnorm(.05,predict(reggig,newdata=data.frame(X=vX[j]),type="response"), sdgig)),max(Y)+15,length=stp)
z0=rep(0,stp)
z=dnorm(y, mgig[j], sdgig)
C=trans3d(c(x,x),c(y,rev(y)),c(z,z0),mat)
polygon(C,border=NA,col="light blue",density=40)
C=trans3d(x,y,z0,mat)
lines(C,lty=2)
C=trans3d(x,y,z,mat)
lines(C,col="blue")}
x <- 1:20
y <- 2*x + rnorm(20, mean = 0, sd = 2)
modelo <- lm(y ~ x)
plot(x = x, y = y, col = "#4ABF9C")
abline(modelo, col = "#316BAC", lwd = 2)
x <- 1:20
y <- 2*x + rnorm(20, mean = 0, sd = 2)
modelo <- lm(y ~ x)
plot(x = x, y = y, col = "#4ABF9C")
abline(modelo, col = "#316BAC", lwd = 2)
x <- 1:20
y <- 2*x + rnorm(20, mean = 0, sd = 2)
modelo <- lm(y ~ x)
plot(x = x, y = y, col = "#FFFFFF")
abline(modelo, col = "#316BAC", lwd = 2)
x <- 1:5
y <- 2*x + rnorm(20, mean = 0, sd = 2)
modelo <- lm(y ~ x)
x <- 1:5
y <- 2*x + rnorm(5, mean = 0, sd = 2)
modelo <- lm(y ~ x)
plot(x = x, y = y, col = "#FFFFFF")
abline(modelo, col = "#316BAC", lwd = 2)
x <- 1:5
y <- 2*x + rnorm(5, mean = 0, sd = 2)
modelo <- lm(y ~ x)
plot(x = x, y = y, col = "#FFFFFF")
abline(modelo, col = "#316BAC", lwd = 2)
x <- 1:5
y <- 2*x + rnorm(5, mean = 0, sd = 2)
modelo <- lm(y ~ x)
plot(x = x, y = y, col = "#FFFFFF")
abline(modelo, col = "#316BAC", lwd = 2)
x <- pisa18$PVMATH
library(dplyr)
library(UsingR)
library(ggplot2)
load("datos/pisa18_puntajes.RData")
x <- pisa18$PVMATH
y <- pisa18$PVREAD
modelo <- lm(y ~ x)
plot(x = x, y = y, col = "#FFFFFF")
abline(modelo, col = "#316BAC", lwd = 2)
x <- pisa18$PVMATH
y <- pisa18$PVREAD
plot(x = pisa18$PVMATH, y = pisa18$PVREAD, col = "#FFFFFF")
abline(modelo, col = "#316BAC", lwd = 2)
